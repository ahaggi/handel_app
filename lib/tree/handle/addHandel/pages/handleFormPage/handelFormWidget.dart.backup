import 'dart:convert';

import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:flutter/material.dart';

import 'package:handle_app/db/db.dart';
import 'package:handle_app/tree/todo/utilWidget/MyTypeAheadTextFormField.dart';
import 'package:handle_app/tree/todo/utilWidget/genericFormWidget.dart';
import 'package:handle_app/tree/todo/utilWidget/myTextFormField%20_Draft.dart';

import 'dart:collection';

import 'package:handle_app/tree/todo/utilWidget/util.dart';
import 'package:handle_app/tree/todo/utilWidget/myCallback.dart';
import 'package:handle_app/tree/todo/utilWidget/TypeAheadMixin.dart';
import 'package:handle_app/tree/product/productForm/addProduktWidget.dart';
import 'package:handle_app/tree/todo/utilWidget/utilUI.dart';

class HandelFormWidget extends StatefulWidget {
  HandelFormWidget({
    this.handelState,
    this.varerState,
    this.submitToDbHandler,
  });
  final Map<String, dynamic> handelState;
  final Map<String, dynamic> varerState;
  final VoidCallback submitToDbHandler;

  @override
  _HandelFormWidgetState createState() => _HandelFormWidgetState();
}

class _HandelFormWidgetState extends State<HandelFormWidget>
    with AutomaticKeepAliveClientMixin<HandelFormWidget> {
  @override
  bool get wantKeepAlive => true;

  final _scaffoldKey = GlobalKey<ScaffoldState>();

  bool _fromAutovalidate;

  /// used just for the input of {"dato", "summen" and all "price/totalPrice"}
  Map<dynamic, dynamic> txtCtrlMap = Map<dynamic, dynamic>();

  Map<dynamic, dynamic> zIndexMap;
  SplayTreeMap<double, dynamic> focusNodeMap =
      SplayTreeMap<double, dynamic>.from({}, (a, b) => a.compareTo(b));
  SplayTreeMap<double, dynamic> invalidNodesMap =
      SplayTreeMap<double, dynamic>.from({}, (a, b) => a.compareTo(b));

  @override
  void initState() {
    super.initState();

    _fromAutovalidate = false;

    /// used just for the input of {"dato", "summen" and all "price/totalPrice"}
    txtCtrlMap = {};

    zIndexMap = UtilUI.initZIndexMap(widget.handelState, 0);
  }

  @override
  void dispose() {
    // all the textCtrls and focusNodes are disposed at it's ¤¤¤ MyTextFormFields
    super.dispose();
  }

  void attachToTextControllerMapHandler(stateKey, txtCtrl) {
    txtCtrlMap[stateKey] = txtCtrl;
  }

  void removeFromTextControllerMapHandler(stateKey) {
    txtCtrlMap.remove(stateKey);
  }

  void attachToFocusNodeMapHandler(key, focusNode) {
    focusNodeMap[key] = focusNode;
  }

  void removeFromFocusNodeMapHandler(key) {
    focusNodeMap.remove(key);
  }

  setFocusOnFirstInvalidNode() => UtilUI.setFocusOnFirstInvalidNode(
      context: context, invalidNodesMap: invalidNodesMap);

  void addOrRemoveFromInvalidNodesHandler(valid, currentNode, zIndex) {
    if (!valid) {
      invalidNodesMap.putIfAbsent(zIndex, () => currentNode);
    } else if (valid) invalidNodesMap.remove(zIndex);
  }

  void _submitHandler() {
    if (widget.varerState.isEmpty)
      UtilUI.getCustomSnackBar(scaffoldKey: _scaffoldKey, text: "sdf!");
    this.submitHandler();
  }

  ///************************************************************************************ */

  // implemented in GenericForm to be used in FormComponentsWidget
  dynamic validateInputHandler;
  void setValidateInputAs(func) => validateInputHandler = func;

  dynamic submitHandler;
  void setSubmitAs(func) {
    submitHandler = func;
  }

  dynamic onSavedHandelStateHandler(String stateKey, {bool isNum = false}) =>
      (String value) {
        // Value blir lagret i State,
        // itilfelle (feltet er num + ikkeValid), vil "value" blir = null i State men ikke i TextFormField/txtCtrl
        var statevalue = isNum
            ? Util.parseStringtoNum(value)
            : value; // Denne for å prøve å sette et tall som verdien på state for de feltene merkert isNum

        widget.handelState[stateKey] = statevalue;
      };

  void changeToNextFocusNodeHandler(double zIndex) {
    double nxtKey = focusNodeMap.firstKeyAfter(zIndex);

    if (nxtKey != null) {
      FocusNode currentNode = focusNodeMap[zIndex];
      FocusNode nextFocusNode = focusNodeMap[nxtKey];
      if (!(currentNode == null || nextFocusNode == null)) {
        currentNode.unfocus();
        FocusScope.of(context).requestFocus(nextFocusNode);
      }
    } else
      FocusScope.of(context).unfocus(); // lose focus
  }

  /// ¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤
  /// this is implemented at "TypeAheadTextFormFeild", and will run inside widget, onNotification: (scrollNotification)
  VoidCallback onScrollHandler;

  void setOnScrollHandelFormHandler(function) {
    onScrollHandler = function;
  }

  /// ¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤

  @override
  Widget build(BuildContext context) {
/****************************************************************************** */
    Widget _handelFormComponentsWidget = HandelFormComponentsWidget(
      handelState: widget.handelState,
      varerState: widget.varerState,
      txtCtrlMap: this.txtCtrlMap,
      zIndexMap: this.zIndexMap,
      focusNodeMap: this.focusNodeMap,
      invalidNodesMap: this.invalidNodesMap,
      changeToNextFocusNodeHandler: changeToNextFocusNodeHandler,
      validateInputHandler: validateInputHandler,
      addOrRemoveFromInvalidNodesHandler: addOrRemoveFromInvalidNodesHandler,
      onSavedHandelStateHandler: onSavedHandelStateHandler,
      attachToTextControllerMapHandler: attachToTextControllerMapHandler,
      removeFromTextControllerMapHandler: removeFromTextControllerMapHandler,
      attachToFocusNodeMapHandler: attachToFocusNodeMapHandler,
      removeFromFocusNodeMapHandler: removeFromFocusNodeMapHandler,
      onSubmit: _submitHandler,
      setOnScrollHandelFormHandler: setOnScrollHandelFormHandler,
    );

    Widget _form = GenericFormWidget(
      scaffoldKey: _scaffoldKey,
      child: _handelFormComponentsWidget,
      setSubmitAs: setSubmitAs,
      setValidateInputAs: setValidateInputAs,
      onSubmitToDB: widget.submitToDbHandler,
      onSetFocusOnFirstInvalidNode: setFocusOnFirstInvalidNode,
      onScrollHandler: onScrollHandler,
    );

/****************************************************************************** */

    // Widget form = Material(
    //   child: NestedScrollView(
    // headerSliverBuilder: (BuildContext context, bool innerBoxIsScrolled) {
    //   return <Widget>[
    //     new SliverAppBar(
    //       pinned: true,
    //       title: const Text('Legg til et handel'),

    //     ),
    //   ];
    // },
    // body: Form(
    //   key: formKey,
    //   autovalidate: _fromAutovalidate,
    //   child: Padding(
    //     padding: const EdgeInsets.only(left: 20.0, right: 20.0),
    //     child: Column(
    //       crossAxisAlignment: CrossAxisAlignment.stretch,
    //       children: <Widget>[
    //         _dato(),
    //         _butikk,
    //         Expanded(
    //           child:
    //         ,
    //         ),
    //         _summen,
    //         _betaltMed,
    //         _submitBtn,
    //       ],
    //     ),
    //   ),
    // )),
    // );

    return Scaffold(
        key: _scaffoldKey,
        appBar: AppBar(
          title: const Text('Legg til et handel'),
        ),
        body: _form);
  }
}

class HandelFormComponentsWidget extends StatelessWidget {
  HandelFormComponentsWidget({
    Key key,
    this.handelState,
    this.varerState,
    this.txtCtrlMap,
    this.zIndexMap,
    this.focusNodeMap,
    this.invalidNodesMap,
    this.changeToNextFocusNodeHandler,
    this.validateInputHandler,
    this.addOrRemoveFromInvalidNodesHandler,
    this.onSavedHandelStateHandler,
    this.attachToTextControllerMapHandler,
    this.removeFromTextControllerMapHandler,
    this.attachToFocusNodeMapHandler,
    this.removeFromFocusNodeMapHandler,
    this.onSubmit,
    this.setOnScrollHandelFormHandler,
  }) : super(key: key);

  final Map<String, dynamic> handelState;
  final Map<String, dynamic> varerState;
  final Map<dynamic, dynamic> txtCtrlMap;

  final Map<dynamic, dynamic> zIndexMap;
  final SplayTreeMap<double, dynamic> focusNodeMap;
  final SplayTreeMap<double, dynamic> invalidNodesMap;

  final dynamic changeToNextFocusNodeHandler;
  final dynamic validateInputHandler;
  final dynamic addOrRemoveFromInvalidNodesHandler;
  final dynamic onSavedHandelStateHandler;
  final dynamic attachToTextControllerMapHandler;
  final dynamic removeFromTextControllerMapHandler;
  final dynamic attachToFocusNodeMapHandler;
  final dynamic removeFromFocusNodeMapHandler;
  final dynamic onSubmit;

  dynamic setOnScrollHandelFormHandler;

  /// this is implemented at "TypeAheadTextFormFeild", and will run inside widget, onNotification: (scrollNotification)
  VoidCallback onScrollHandler;

  void setOnScrollHandler(function) {
    onScrollHandler = function;
    // To bubble up the notification, and allow it to continue to be dispatched to further ancestors(FormHandler)
    setOnScrollHandelFormHandler(function);
  }

  Widget _butikk() => MyTypeAheadTextFormField(
        attachToFocusNodeMap: (node) =>
            attachToFocusNodeMapHandler(zIndexMap["butikk"], node),
        // removeFromFocusNodeMap: ,
        dataStream: DataDB.getStreamHandleCollectionSnapshot(),
        // onElmHasBeenChoosen: ,
        setOnScrollHandler: setOnScrollHandler,

        extractDataFromSnapshot: (snapshot) {
          Map<String, String> _data = Map<String, String>();
          snapshot.data.documents.forEach((doc) {
            if (doc != null && doc["butikk"] != null) {
              String butikk = doc["butikk"].toString();
              _data.putIfAbsent(butikk.toLowerCase(), () => butikk);
            }
          });
          return _data;
        },
        childAttirbutes: {
          "label": "Butikk",
          "fieldKey": "butikk",
          "validateInput": (value) =>
              validateInputHandler(value, required: true),
          "changeToNextFocusNode": () =>
              changeToNextFocusNodeHandler(zIndexMap["butikk"]),
          "onSaved": (value) => onSavedHandelStateHandler("butikk")(value),
          "addOrRemoveFromInvalidNodes": (valid, focusNode) =>
              addOrRemoveFromInvalidNodesHandler(
                  valid, focusNode, zIndexMap["butikk"]),
          "keyboardType": TextInputType.text,
        },
      );

  @override
  Widget build(BuildContext context) {
    void selectDateListner([FocusNode node]) {
      double zIndex = zIndexMap["dato"];
      FocusNode focusNode = node ?? focusNodeMap[zIndex];

      if ((focusNode?.hasFocus) ?? false) {
        FocusScope.of(context).unfocus();
      }
      UtilUI.selectDate(
          context: context,
          onPicked: (picked) =>
              txtCtrlMap["dato"].text = picked.toString().substring(0, 10));
    }

    Widget _dato() {
      Widget dt = Row(children: <Widget>[
        Expanded(
          flex: 3,
          child: MyTextFormField_draft(
            label: "Dato",
            fieldKey: "dato",
            onTap: selectDateListner,
            validateInput: (value) =>
                validateInputHandler(value, required: true, isDate: true),
            changeToNextFocusNode: () =>
                changeToNextFocusNodeHandler(zIndexMap["dato"]),
            onSaved: (value) => onSavedHandelStateHandler("dato")(value),
            addOrRemoveFromInvalidNodes: (valid, focusNode) =>
                addOrRemoveFromInvalidNodesHandler(
                    valid, focusNode, zIndexMap["dato"]),
            attachToTextControllerMap: attachToTextControllerMapHandler,
            removeFromTextControllerMap: removeFromTextControllerMapHandler,
            attachToFocusNodeMap: (node) =>
                attachToFocusNodeMapHandler(zIndexMap["dato"], node),
            removeFromFocusNodeMap: () =>
                removeFromFocusNodeMapHandler(zIndexMap["dato"]),
            addListnersToFocusNode: [
              (node) {
                if ((node?.hasFocus) ?? false) FocusScope.of(context).unfocus();
              }
            ],
          ),
        ),
      ]);

      return dt;
    }

    Widget _summen() => MyTextFormField_draft(
          label: "Summen",
          fieldKey: "summen",
          // enabled: false,

          validateInput: (value) => validateInputHandler(value,
              required: true, isNum: true, hasToBePos: true),
          // changeToNextFocusNode: null,
          onSaved: (value) => onSavedHandelStateHandler(
            "summen",
            isNum: true,
          )(value),
          // addOrRemoveFromInvalidNodes: (valid, focusNode) =>
          //     addOrRemoveFromInvalidNodesHandler(
          //         valid, focusNode, zIndexMap["dato"]),
          attachToTextControllerMap: attachToTextControllerMapHandler,
          removeFromTextControllerMap: removeFromTextControllerMapHandler,
          addListnersToFocusNode: [
            (node) {
              if ((node?.hasFocus) ?? false) FocusScope.of(context).unfocus();
            }
          ],
        );
    Widget _betaltMed() => Container(
          child: Row(
            crossAxisAlignment: CrossAxisAlignment.end,
            children: <Widget>[
              Expanded(
                flex: 1,
                child: MyTextFormField_draft(
                  label: "betalt med bankkort",
                  fieldKey: "bankkort",
                  validateInput: txtCtrlMap["summen"]?.text != null
                      ? (value) => validateInputHandler(value,
                          required: true, isNum: true)
                      : null,
                  changeToNextFocusNode: () =>
                      changeToNextFocusNodeHandler(zIndexMap["bankkort"]),
                  onSaved: (value) =>
                      onSavedHandelStateHandler("bankkort", isNum: true)(value),
                  addOrRemoveFromInvalidNodes: (valid, focusNode) =>
                      addOrRemoveFromInvalidNodesHandler(
                          valid, focusNode, zIndexMap["bankkort"]),
                  keyboardType: TextInputType.number,
                  // attachToTextControllerMap: attachToTextControllerMapHandler,
                  // removeFromTextControllerMap: removeFromTextControllerMapHandler,
                  attachToFocusNodeMap: (node) =>
                      attachToFocusNodeMapHandler(zIndexMap["bankkort"], node),
                  removeFromFocusNodeMap: () =>
                      removeFromFocusNodeMapHandler(zIndexMap["bankkort"]),
                ),
              ),
              Expanded(
                flex: 1,
                child: MyTextFormField_draft(
                  label: "betalt kontant",
                  fieldKey: "kontant",
                  validateInput: (value) =>
                      validateInputHandler(value, required: true, isNum: true),
                  changeToNextFocusNode: () =>
                      changeToNextFocusNodeHandler(zIndexMap["kontant"]),
                  onSaved: (value) =>
                      onSavedHandelStateHandler("kontant", isNum: true)(value),
                  addOrRemoveFromInvalidNodes: (valid, focusNode) =>
                      addOrRemoveFromInvalidNodesHandler(
                          valid, focusNode, zIndexMap["kontant"]),
                  keyboardType: TextInputType.number,
                  // attachToTextControllerMap: attachToTextControllerMapHandler,
                  // removeFromTextControllerMap: removeFromTextControllerMapHandler,
                  attachToFocusNodeMap: (node) =>
                      attachToFocusNodeMapHandler(zIndexMap["kontant"], node),
                  removeFromFocusNodeMap: () =>
                      removeFromFocusNodeMapHandler(zIndexMap["kontant"]),
                ),
              )
            ],
          ),
        );

    Widget _cancelBtn;

    Widget _submitBtn() => Container(
          margin: EdgeInsets.all(16.0),
          child: RaisedButton(
            child: Text("Legg til", style: TextStyle(fontSize: 20.0)),
            onPressed: onSubmit,
          ),
        );

    Widget _varerPriceListViewWidget = NotificationListener<ScrollNotification>(
        onNotification: (scrollNotification) {
          if (onScrollHandler != null) onScrollHandler();
          print((scrollNotification is OverscrollNotification));

          return (scrollNotification is OverscrollNotification);
        },
        child: ListView(
          children: [
            VarerPriceListWidget(
              txtCtrlMap: txtCtrlMap,
              focusNodeMap: focusNodeMap,
              varerState: varerState,
              minZIndex: zIndexMap["varer"],
              maxZIndex: zIndexMap["summen"],
              changeToNextFocusNode: changeToNextFocusNodeHandler,
              addOrRemoveFromInvalidNodesHandler:
                  addOrRemoveFromInvalidNodesHandler,
              validateInputHandler: validateInputHandler,
              attachToTextControllerMapHandler:
                  attachToTextControllerMapHandler,
              removeFromTextControllerMapHandler:
                  removeFromTextControllerMapHandler,
              attachToFocusNodeMapHandler: attachToFocusNodeMapHandler,
              removeFromFocusNodeMapHandler: removeFromFocusNodeMapHandler,
            )
          ],
        ));

    return Column(
      mainAxisSize: MainAxisSize.min,
      crossAxisAlignment: CrossAxisAlignment.stretch,
      children: <Widget>[
        _dato(),
        _butikk(),
        Container(
          height: ((MediaQuery.of(context).size.height) -
                  (MediaQuery.of(context).padding.top) -
                  kToolbarHeight) /
              2.5,
          color: Colors.blueGrey,
          margin: EdgeInsets.only(right: 20.0, left: 20.0, top: 10.0),
          child: _varerPriceListViewWidget,
        ),
        _summen(),
        _betaltMed(),
        _submitBtn(),
      ],
    );
  }
}

class VarerPriceListWidget extends StatelessWidget {
  VarerPriceListWidget({
    this.txtCtrlMap,
    this.focusNodeMap,
    this.varerState,
    this.maxZIndex,
    this.minZIndex,
    this.changeToNextFocusNode,
    this.addOrRemoveFromInvalidNodesHandler,
    this.validateInputHandler,
    this.attachToFocusNodeMapHandler,
    this.removeFromFocusNodeMapHandler,
    this.attachToTextControllerMapHandler,
    this.removeFromTextControllerMapHandler,
  });
  final Map<dynamic, dynamic> txtCtrlMap;
  final SplayTreeMap<dynamic, dynamic> focusNodeMap;
  final Map<String, dynamic> varerState;
  final double maxZIndex;
  final double minZIndex;
  final dynamic changeToNextFocusNode;
  final dynamic addOrRemoveFromInvalidNodesHandler;
  final dynamic validateInputHandler;
  final MC2Dynamicvoid attachToTextControllerMapHandler;
  final MCDynamicVoid removeFromTextControllerMapHandler;
  final dynamic attachToFocusNodeMapHandler;
  final MCDynamicVoid removeFromFocusNodeMapHandler;

  @override
  Widget build(BuildContext context) {
    BoxDecoration getboxDecorationVareEntry(bool b) => BoxDecoration(
          color: b
              ? Theme.of(context).backgroundColor
              : Theme.of(context).cardColor,
          shape: BoxShape.rectangle,
          borderRadius: BorderRadius.circular(8.0),
          boxShadow: <BoxShadow>[
            BoxShadow(
              color: Colors.black12,
              blurRadius: 10.0,
              offset: Offset(0.0, 10.0),
            ),
          ],
        );

    void calcDependentPrice(
        String prodID, String stateKey, String fieldKey, focusNode) {
      if (focusNode.hasFocus) {
        num mengde = varerState[prodID]["mengde"];
        num value = Util.parseStringtoNum(txtCtrlMap[fieldKey].text);
        switch (stateKey) {
          case "pris":
            double dependentValue = (value != null &&
                    mengde > 0) // mengde != null && mengde != null
                ? value.toDouble() * mengde.toDouble()
                : 0.0;
            txtCtrlMap[prodID + "totalPris"].text =
                (dependentValue).toStringAsFixed(2);
            break;
          case "totalPris":
            double dependentValue = (value != null &&
                    mengde > 0) // mengde != null && mengde != null
                ? value.toDouble() / mengde.toDouble()
                : 0.0;
            txtCtrlMap[prodID + "pris"].text =
                (dependentValue).toStringAsFixed(2);
            break;
          default:
        }
      }
    }

    void calcSummen() {
      num summen = 0;

      txtCtrlMap.forEach((k, txtCtrl) {
        if (k.contains("totalPris")) {
          num totp = Util.parseStringtoNum(txtCtrl.text);
          totp = totp == null ? 0 : totp;
          summen += totp;
        }
      });

      txtCtrlMap["summen"].text = summen.toDouble().toStringAsFixed(2);
    }

    dynamic onSavedHandlerVareState(String prodID, String stateKey) =>
        (String value) {
          num val = Util.parseStringtoNum(value);

          var statevalue = val != null
              ? val.toDouble()
              : val; // Denne for å prøve å sette et tall som verdien på state

          varerState[prodID][stateKey] = statevalue;
        };

    Widget getTextInput(
        {String label, String stateKey, String prodID, double zIndex}) {
      ///
      /// "key" til  (pris/totalpris feltene) i focusNodeMap og txtCtrlMap, er lik "fieldKey" og ikke "stateKey"
      ///
      String fieldKey = prodID + stateKey;

      Widget _txtFormField = MyTextFormField_draft(
        label: label,
        fieldKey: fieldKey,
        validateInput: (value) =>
            validateInputHandler(value, required: true, isNum: true),
        changeToNextFocusNode: () => changeToNextFocusNode(zIndex),
        onSaved: (value) => onSavedHandlerVareState(prodID, stateKey)(value),
        addOrRemoveFromInvalidNodes: (valid, focusNode) =>
            addOrRemoveFromInvalidNodesHandler(valid, focusNode, zIndex),
        keyboardType: TextInputType.number,
        attachToTextControllerMap: attachToTextControllerMapHandler,
        removeFromTextControllerMap: (fKey) =>
            removeFromTextControllerMapHandler(fKey),
        attachToFocusNodeMap: (node) =>
            attachToFocusNodeMapHandler(zIndex, node),
        removeFromFocusNodeMap: () => removeFromFocusNodeMapHandler(zIndex),
        addListnersToTextController: [
          (FocusNode node) =>
              calcDependentPrice(prodID, stateKey, fieldKey, node),
          //
          () {
            if (stateKey == "totalPris") calcSummen();
          },
        ],
        addListnersToFocusNode: [
          (FocusNode node) {
            if (node.hasFocus)
              txtCtrlMap[fieldKey].selection = TextSelection(
                  baseOffset: 0,
                  extentOffset: txtCtrlMap[fieldKey].text.length);
          }
        ],
      );

      return _txtFormField;
    }

    //kun hvis vare er skannet ,, men ikke hvis vare blir valgt fra TypeaHeadFeild
    void routeToAddNewProduktWidget(dynamic vare, String strekkode) async {
      Map result = await Navigator.push(
        context,
        MaterialPageRoute(
            builder: (context) => AddNewProduktWidget(
                  strekkode: strekkode,
                )),
      );
      bool onSeccess =
          result != null && result["navn"] != null && result["navn"].isNotEmpty;

      if (onSeccess) {
        vare["produktID"] = result["produktID"];
        vare["navn"] = result["navn"];
      }
    }

    Widget getPriceRow(Map<String, dynamic> vare, double zIndex) {
      bool isUnregisteredProdukt =
          (vare["produktID"] ?? "").contains("UnregisteredProdukt");
      bool bgColor = ((zIndex * 10) ~/ 1).isOdd;
      return Container(
        // Keys! What are they good for? https://medium.com/flutter/keys-what-are-they-good-for-13cb51742e7d
        key: ValueKey(vare["produktID"]),
        padding: EdgeInsets.all(8.0),
        decoration: getboxDecorationVareEntry(bgColor),
        child: Column(
          children: [
            Row(
              children: <Widget>[
                Expanded(
                  child: isUnregisteredProdukt
                      ? InkWell(
                          child: Text(
                            'Legg til prod info',
                            style: TextStyle(color: Colors.blue),
                          ),
                          onTap: () {
                            routeToAddNewProduktWidget(vare, vare["strekkode"]);
                          })
                      : Text(vare["navn"]),
                ),
                // Text(vare["produktID"].toString()),
              ],
            ),
            Row(
              crossAxisAlignment: CrossAxisAlignment.end,
              children: <Widget>[
                Expanded(
                  flex: 1,
                  child: getTextInput(
                      label: "Pris",
                      stateKey: "pris",
                      zIndex: (zIndex + 0.01),
                      prodID: vare["produktID"]),
                ),
                Expanded(
                    flex: 1,
                    child: Center(
                        child: Text("X" +
                            vare["mengde"].toString() +
                            (vare["erLoesvekt"] ? "kg" : "")))),
                Expanded(
                  flex: 2,
                  child: getTextInput(
                      label: "TotalPris",
                      stateKey: "totalPris",
                      zIndex: (zIndex + 0.02),
                      prodID: vare["produktID"]),
                )
              ],
            ),
          ],
        ),
      );
    }

    Widget _getAllPriceRows() {
      double zIndex = this.minZIndex;

      List<Widget> tiles = List<Widget>();

      varerState.forEach((k, v) {
        tiles.add(getPriceRow(v, (zIndex)));
        zIndex += 0.1;
      });
      txtCtrlMap.forEach((k, v) {
        if (k.toString().contains("pris")) {

          // num pris = Util.parseStringtoNum(txtCtrlMap[k]) ?? 0;
          // num mengde = Util.parseStringtoNum(txtCtrlMap["mengde"]) ?? 0;
          // txtCtrlMap["totalPris"] = (pris * mengde).toString();
        }
      });

      /// Cleaning up the focusNodeMap:
      /// at this line zIndex will be equal to the last "totalPris" element,
      /// if there is any value in focusNodeMap where (minZIndex < value < maxZIndex)
      /// that means there has been removed some elems "varer" in the prev build
      focusNodeMap.removeWhere((k, v) => k < this.maxZIndex && k > zIndex);

      return Column(children: tiles);
    }

    return _getAllPriceRows();
  }
}
